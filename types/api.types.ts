/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of projects */
        get: {
            parameters: {
                query?: {
                    groupId?: components["schemas"]["GroupId"];
                    ownerId?: components["schemas"]["UserId"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of projects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["Project"][];
                            statusCode?: number;
                            statusMessage?: string;
                            message?: string | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The title of the project */
                        title: string;
                        /** @description The project description */
                        description?: string;
                        /** @description The ID of the group the project belongs to */
                        groupId: components["schemas"]["GroupId"];
                    };
                };
            };
            responses: {
                /** @description Project created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["properties"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a project by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Project details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/epics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of epics */
        get: {
            parameters: {
                query?: {
                    projectId?: components["schemas"]["ProjectId"];
                    ownerId?: components["schemas"]["UserId"];
                    groupId?: components["schemas"]["GroupId"];
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of epics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Epic"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new epic */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The title of the epic */
                        title: string;
                        /** @description The epic description */
                        description?: string;
                        /** @description The ID of the project which the epic belongs to */
                        projectId: components["schemas"]["ProjectId"];
                    };
                };
            };
            responses: {
                /** @description Epic created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of stories */
        get: {
            parameters: {
                query?: {
                    projectId?: components["schemas"]["ProjectId"];
                    limit?: number;
                    offset?: number;
                    sort?: string;
                    order?: string;
                    ownerId?: components["schemas"]["UserId"];
                    groupId?: components["schemas"]["GroupId"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of stories */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Story"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new story */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The title of the story */
                        title: string;
                        /** @description The story description */
                        description?: string;
                        /** @description The ID of the project the story belongs to */
                        projectId: components["schemas"]["ProjectId"];
                        /** @description The ID of the epic the story belongs to */
                        epicId?: components["schemas"]["EpicId"];
                    };
                };
            };
            responses: {
                /** @description Story created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of tasks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of tasks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"][];
                    };
                };
            };
        };
        /** Update a task by ID */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["TaskId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The title of the task */
                        title?: string;
                        /** @description The task description */
                        description?: string;
                        /** @description The project ID the task belongs to */
                        projectId?: components["schemas"]["ProjectId"];
                        /** @description The story ID the task belongs to */
                        storyId?: components["schemas"]["StoryId"];
                        /** @description The epic ID the task belongs to */
                        epicId?: components["schemas"]["EpicId"];
                        /** @description The user ID the task is assigned to */
                        assigneeId?: components["schemas"]["UserId"];
                        /** @description The estimated effort for the task */
                        estimation?: number;
                        /** @description The status of the task */
                        status?: string;
                    };
                };
            };
            responses: never;
        };
        /** Create a new task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The title of the task */
                        title: string;
                        /** @description The task description */
                        description?: string;
                        /** @description The project ID the task belongs to */
                        projectId: components["schemas"]["ProjectId"];
                        /** @description The story ID the task belongs to */
                        storyId?: components["schemas"]["StoryId"];
                        /** @description The epic ID the task belongs to */
                        epicId?: components["schemas"]["EpicId"];
                        /** @description The user ID the task is assigned to */
                        assigneeId?: components["schemas"]["UserId"];
                        /** @description The estimated effort for the task */
                        estimation?: number;
                        /** @description The status of the task */
                        status: string;
                    };
                };
            };
            responses: {
                /** @description Task created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a task by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["TaskId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"];
                    };
                };
                /** @description Task not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a task by ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["TaskId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Task not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/taskwatchers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a task watcher */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The ID of the task to watch */
                        taskId: components["schemas"]["TaskId"];
                        /** @description The ID of the user who will be watching the task */
                        userId: components["schemas"]["UserId"];
                    };
                };
            };
            responses: {
                /** @description Task watcher added */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Remove a task watcher */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The ID of the task */
                        taskId: components["schemas"]["TaskId"];
                        /** @description The ID of the user */
                        userId: components["schemas"]["UserId"];
                    };
                };
            };
            responses: {
                /** @description Task watcher removed */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description The unique identifier for the group */
        GroupId: number;
        /** @description The unique identifier for the User */
        UserId: string;
        /** @description The unique identifier for the project */
        ProjectId: number;
        Project: {
            /** @description The unique identifier for the project */
            id?: components["schemas"]["ProjectId"];
            /** @description The title of the project */
            title: string;
            /** @description The project description */
            description?: string;
            /** @description The ID of the project owner */
            ownerId?: components["schemas"]["UserId"];
            /** @description The ID of the group the project belongs to */
            groupId: components["schemas"]["GroupId"];
        };
        properties: unknown;
        /** @description The unique identifier for the epic */
        EpicId: number;
        Epic: {
            /** @description The unique identifier for the epic */
            id: components["schemas"]["EpicId"];
            /** @description The title of the epic */
            title: string;
            /** @description The epic description */
            description?: string;
            /** @description The ID of the user who owns the epic */
            ownerId?: components["schemas"]["UserId"];
            /** @description The ID of the project the epic belongs to */
            projectId: components["schemas"]["ProjectId"];
            /**
             * Format: date-time
             * @description The date and time when the epic was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the epic was last updated
             */
            updatedAt: string;
        };
        Story: {
            /** @description The unique identifier for the story */
            id: components["schemas"]["GroupId"];
            /** @description The title of the story */
            title: string;
            /** @description The story description */
            description?: string;
            /** @description The ID of the project the story belongs to */
            projectId: components["schemas"]["ProjectId"];
            /** @description The ID of the epic the story belongs to */
            epicId?: components["schemas"]["EpicId"];
            /** @description The ID of the user who owns the story */
            ownerId: components["schemas"]["UserId"];
            /**
             * Format: date-time
             * @description The date and time when the story was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the story was last updated
             */
            updatedAt: string;
        };
        /** @description The unique identifier for the story */
        StoryId: number;
        Task: {
            /** @description The unique identifier for the task */
            id?: components["schemas"]["GroupId"];
            /** @description The title of the task */
            title: string;
            /** @description The task description */
            description?: string;
            /** @description The ID of the project the task belongs to */
            projectId: components["schemas"]["ProjectId"];
            /** @description The ID of the story the task belongs to */
            storyId?: components["schemas"]["StoryId"];
            /** @description The ID of the epic the task belongs to */
            epicId?: components["schemas"]["EpicId"];
            /** @description The ID of the user assigned to the task */
            assigneeId?: components["schemas"]["UserId"];
            /** @description The estimated effort for the task */
            estimation?: number;
            /** @description The status of the task */
            status: string;
        };
        /** @description The unique identifier for the task */
        TaskId: number;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
